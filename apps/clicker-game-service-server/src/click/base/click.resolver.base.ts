/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Click } from "./Click";
import { ClickCountArgs } from "./ClickCountArgs";
import { ClickFindManyArgs } from "./ClickFindManyArgs";
import { ClickFindUniqueArgs } from "./ClickFindUniqueArgs";
import { CreateClickArgs } from "./CreateClickArgs";
import { UpdateClickArgs } from "./UpdateClickArgs";
import { DeleteClickArgs } from "./DeleteClickArgs";
import { User } from "../../user/base/User";
import { ClickService } from "../click.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Click)
export class ClickResolverBase {
  constructor(
    protected readonly service: ClickService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Click",
    action: "read",
    possession: "any",
  })
  async _clicksMeta(
    @graphql.Args() args: ClickCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Click])
  @nestAccessControl.UseRoles({
    resource: "Click",
    action: "read",
    possession: "any",
  })
  async clicks(@graphql.Args() args: ClickFindManyArgs): Promise<Click[]> {
    return this.service.clicks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Click, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Click",
    action: "read",
    possession: "own",
  })
  async click(
    @graphql.Args() args: ClickFindUniqueArgs
  ): Promise<Click | null> {
    const result = await this.service.click(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Click)
  @nestAccessControl.UseRoles({
    resource: "Click",
    action: "create",
    possession: "any",
  })
  async createClick(@graphql.Args() args: CreateClickArgs): Promise<Click> {
    return await this.service.createClick({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Click)
  @nestAccessControl.UseRoles({
    resource: "Click",
    action: "update",
    possession: "any",
  })
  async updateClick(
    @graphql.Args() args: UpdateClickArgs
  ): Promise<Click | null> {
    try {
      return await this.service.updateClick({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Click)
  @nestAccessControl.UseRoles({
    resource: "Click",
    action: "delete",
    possession: "any",
  })
  async deleteClick(
    @graphql.Args() args: DeleteClickArgs
  ): Promise<Click | null> {
    try {
      return await this.service.deleteClick(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Click): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
